-- SQL課題1,2
USE my_database;

CREATE TABLE IF NOT EXISTS EMPLOYEES(
  ID INT AUTO_INCREMENT PRIMARY KEY,
  NAME VARCHAR(50) NOT  NULL,
  AGE INT NOT NULL,
  JOB VARCHAR(30),
  SAL INT,
  DEPARTMENT_ID INT
);

CREATE TABLE IF NOT EXISTS DEPARTMENT(
  ID INT AUTO_INCREMENT PRIMARY KEY,
  DEPARTMENT_NAME VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS PROJECT(
  ID INT AUTO_INCREMENT PRIMARY KEY,
  PROJECT_NAME VARCHAR(100) NOT NULL,
  EMPLOYEE_ID INT,
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(id)
);

-- EMPLOYEES テーブルにデータ追加
INSERT INTO EMPLOYEES (NAME, AGE, JOB, SAL, DEPARTMENT_ID) VALUES
('松田', 65, '社長', 950000, 1),
('山田', 43, '部長', 680000, 2),
('北條', 30, '営業マネージャー', 600000, 3),
('佐藤', 28, 'エンジニア', 500000, 2),
('鈴木', 35, 'エンジニア', 550000, 2);

-- DEPARTMENT テーブルにデータ追加
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES
('経営管理部'),
('技術部'),
('営業部');

-- PROJECT テーブルにデータ追加
INSERT INTO PROJECT (PROJECT_NAME, EMPLOYEE_ID) VALUES
('新規開発プロジェクト', 4),
('マーケティングキャンペーン', 3),
('製品改善プロジェクト', 5);

-- 全データ取得
SELECT * FROM EMPLOYEES;

-- 特定の列のみ取得（NAME と SAL）
SELECT NAME, SAL FROM EMPLOYEES;

-- 条件付き取得（SALが500000以上）
SELECT * FROM EMPLOYEES WHERE SAL >= 500000;

-- 並び替え（SAL の降順）
SELECT * FROM EMPLOYEES ORDER BY SAL DESC;

-- データ追加（INSERT）
INSERT INTO EMPLOYEES (NAME, AGE, JOB, SAL)
VALUES ('佐藤', 35, '営業', 550000);

-- データ更新（松田さんのSALを1000000に変更）
UPDATE EMPLOYEES
SET SAL = 1000000
WHERE NAME = '松田';

-- データ削除（北條さんを削除）
DELETE FROM EMPLOYEES
WHERE NAME = '北條';

-- データ件数を取得（COUNT関数）
SELECT COUNT(*) FROM EMPLOYEES;

-- 重複排除（JOBの一覧を取得）
SELECT DISTINCT JOB FROM EMPLOYEES;

-- グループ化（JOBごとの人数を取得）
SELECT JOB, COUNT(*) AS TOTAL_EMPLOYEES
FROM EMPLOYEES
GROUP BY JOB;

-- HAVING: グループ条件
SELECT JOB, COUNT(*) AS TOTAL_EMPLOYEES
FROM EMPLOYEES
GROUP BY JOB
HAVING COUNT(*) >= 2;

-- INNER JOIN: テーブルの結合
SELECT E.NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES AS E
INNER JOIN DEPARTMENT AS D
ON E.DEPARTMENT_ID = D.ID;

-- LEFT JOIN: 左結合
SELECT E.NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES AS E
LEFT JOIN DEPARTMENT AS D
ON E.DEPARTMENT_ID = D.ID;

-- サブクエリ: 条件の入れ子（平均SALより高い人）
SELECT NAME, SAL
FROM EMPLOYEES
WHERE SAL > (SELECT AVG(SAL) FROM EMPLOYEES);

-- ORDER BY と LIMIT: 月給高い順トップ3
SELECT *
FROM EMPLOYEES
ORDER BY SAL DESC
LIMIT 3;

-- ウィンドウ関数: 行番号付与
SELECT NAME, SAL,
ROW_NUMBER() OVER (ORDER BY SAL DESC) AS ROW_NUM
FROM EMPLOYEES;

-- トランザクション管理
START TRANSACTION;

UPDATE EMPLOYEES
SET SAL = SAL - 50000
WHERE NAME = '山田';

UPDATE EMPLOYEES
SET SAL = SAL + 50000
WHERE NAME = '北條';

COMMIT;

-- CASE文: 条件による表示
SELECT NAME, SAL,
CASE
  WHEN SAL >= 500000 THEN '高給'
  ELSE '普通'
END AS SALARY_LEVEL
FROM EMPLOYEES;

-- 複雑なサブクエリ: 各部署ごとの最大月給者
SELECT NAME, SAL, DEPARTMENT_ID
FROM EMPLOYEES AS E
WHERE SAL = (
  SELECT MAX(SAL)
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID = E.DEPARTMENT_ID
);

-- FULL OUTER JOIN: 全結合（MySQLはUNIONで代用）
SELECT E.NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES AS E
LEFT JOIN DEPARTMENT AS D
ON E.DEPARTMENT_ID = D.ID

UNION

SELECT E.NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES AS E
RIGHT JOIN DEPARTMENT AS D
ON E.DEPARTMENT_ID = D.ID;
